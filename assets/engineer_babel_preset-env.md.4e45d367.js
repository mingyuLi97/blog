import{_ as e,o as r,c as t,Q as a}from"./chunks/framework.f14b72c3.js";const _=JSON.parse('{"title":"@babel/preset-env","description":"","frontmatter":{},"headers":[],"relativePath":"engineer/babel/preset-env.md"}'),l={name:"engineer/babel/preset-env.md"},o=a('<h1 id="babel-preset-env" tabindex="-1">@babel/preset-env <a class="header-anchor" href="#babel-preset-env" aria-label="Permalink to &quot;@babel/preset-env&quot;">​</a></h1><p><code>@babel/preset-env</code> 是一大堆插件的集合，包含了当前浏览器环境下，所有语言特性的插件，可以根据 <a href="https://github.com/browserslist/browserslist" target="_blank" rel="noreferrer">browserList</a> 的结果，选择合适的插件将新语言特性转译成旧浏览器可以支持的表达方式。</p><p>首先我们来理清楚这三个概念:</p><ul><li>最新 ES 语法，比如：箭头函数，let/const。</li><li>最新 ES Api，比如 Promise</li><li>最新 ES 实例/静态方法，比如 String.prototype.include</li></ul><p>prest-env 仅仅只会转化最新的 es 语法，并不会转化对应的 Api 和实例方法。</p><p>比如说 ES 6 中的 Array.from 静态方法。babel 是不会转译这个方法的，如果想在低版本浏览器中识别并且运行 Array.from 方法达到我们的预期就需要额外引入 polyfill 进行在 Array 上添加实现这个方法。</p><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><h4 id="usebuiltins" tabindex="-1">useBuiltIns <a class="header-anchor" href="#usebuiltins" aria-label="Permalink to &quot;useBuiltIns&quot;">​</a></h4><ul><li><code>false</code> (默认)</li></ul><p>仅会转化最新的 ES 语法，并不会转化任何 Api 和方法。</p><ul><li><code>&#39;entry&#39;</code></li></ul><p>当传入 entry 时，需要我们在项目入口文件中手动引入一次 core-js，它会根据我们配置的浏览器兼容性列表<strong>全量</strong>引入不兼容的 polyfill。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>🚨 从 Babel 7.4.0 开始，这个包已经被弃用，取而代之的是直接包含 core-js/stable（以填充 ECMAScript 特性）</p><p>如果您正在将生成器或异步函数编译到 ES5，并且您使用的版本低于 <code>@babel/core</code> 或 <code>@babel/plugin-transform-regenerator</code> 低于 7.18.0，则还必须加载该 regenerator runtime 包。使用<code>@babel/preset-env``useBuiltIns: &quot;usage&quot;</code>选项或时会自动加载 <code>@babel/plugin-transform-runtime</code>。</p></div><ul><li><code>&#39;usage&#39;</code></li></ul><p>根据配置的浏览器兼容，以及代码中使用到的 Api 进行引入 polyfill <strong>按需添加</strong>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>entry</code>: 入口处全量引入</p><p><code>usage</code>: 使用的地方按需引入</p></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://www.babeljs.cn/docs/babel-preset-env" target="_blank" rel="noreferrer">Babel 官网</a></li><li><a href="https://juejin.cn/post/7025237833543581732" target="_blank" rel="noreferrer">掘金：前端基建 带你在 Babel 的世界中畅游</a></li></ul>',18),s=[o];function i(n,c,p,b,d,u){return r(),t("div",null,s)}const f=e(l,[["render",i]]);export{_ as __pageData,f as default};
