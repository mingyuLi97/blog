import{_ as e,o as t,c as a,R as r}from"./chunks/framework.d45ee533.js";const b=JSON.parse('{"title":"Esbuild","description":"","frontmatter":{},"headers":[],"relativePath":"engineer/packages/esbuild.md"}'),s={name:"engineer/packages/esbuild.md"},i=r('<h1 id="esbuild" tabindex="-1">Esbuild <a class="header-anchor" href="#esbuild" aria-label="Permalink to &quot;Esbuild&quot;">​</a></h1><h2 id="为什么-esbuild-性能极高" tabindex="-1">为什么 Esbuild 性能极高？ <a class="header-anchor" href="#为什么-esbuild-性能极高" aria-label="Permalink to &quot;为什么 Esbuild 性能极高？&quot;">​</a></h2><ul><li><p><strong>使用 Golang 开发</strong>，构建逻辑代码直接被编译为原生机器码，而不用像 JS 一样先代码解析为字节码，然后转换为机器码，大大节省了程序运行时间。</p></li><li><p><strong>多核并行</strong>。内部打包算法充分利用多核 CPU 优势，所有的步骤尽可能并行，这也是得益于 Go 当中多线程共享内存的优势。</p></li><li><p><strong>从零造轮子</strong>。 几乎没有使用任何第三方库，所有逻辑自己编写，大到 AST 解析，小到字符串的操作，保证极致的代码性能。</p></li><li><p><strong>高效的内存利用</strong>。Esbuild 中从头到尾尽可能地复用一份 AST 节点数据，而不用像 JS 打包工具中频繁地解析和传递 AST 数据（如 string -&gt; TS -&gt; JS -&gt; string)，造成内存的大量浪费。</p></li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/book/7050063811973218341/section/7060405118163746850?enter_from=course_center" target="_blank" rel="noreferrer">掘金：深入浅出 Vite</a></li></ul>',5),l=[i];function o(n,d,c,u,_,h){return t(),a("div",null,l)}const g=e(s,[["render",o]]);export{b as __pageData,g as default};
