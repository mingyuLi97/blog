import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.fa80b722.js";const A=JSON.parse('{"title":"第三章：设计思路","description":"","frontmatter":{},"headers":[],"relativePath":"book-note/vuejs-design/3.md","filePath":"book-note/vuejs-design/3.md"}'),o={name:"book-note/vuejs-design/3.md"},e=l(`<h1 id="第三章-设计思路" tabindex="-1">第三章：设计思路 <a class="header-anchor" href="#第三章-设计思路" aria-label="Permalink to &quot;第三章：设计思路&quot;">​</a></h1><h2 id="声明式地描述-ui" tabindex="-1">声明式地描述 UI <a class="header-anchor" href="#声明式地描述-ui" aria-label="Permalink to &quot;声明式地描述 UI&quot;">​</a></h2><p>Vue 支持多种方式来写 UI</p><ol><li>模版式：使用类 HTML 的结构来描述（更直观）</li></ol><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">click</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;ok&#39;</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt; hello &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre></div><ol start="2"><li>虚拟 DOM：使用 js 对象来描述（更灵活）</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;div&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">: [{ </span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;span&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;hello world&#39;</span><span style="color:#ABB2BF;"> }]</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre></div><ol start="3"><li>render 函数（render 函数的返回值就是 虚拟 DOM，其作用是让我们编写虚拟 DOM 更轻松）</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;div&#39;</span><span style="color:#ABB2BF;">, { </span><span style="color:#61AFEF;">onClick</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;ok&#39;</span><span style="color:#ABB2BF;">) });</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre></div><h2 id="渲染器" tabindex="-1">渲染器 <a class="header-anchor" href="#渲染器" aria-label="Permalink to &quot;渲染器&quot;">​</a></h2><ol><li>渲染器的作用就是把虚拟 DOM 渲染为真实 DOM</li><li>其实现原理就是把虚拟 DOM 对象通过我们熟悉的 DOM 操作 API 来完成渲染工作。</li></ol><h2 id="组件的本质" tabindex="-1">组件的本质 <a class="header-anchor" href="#组件的本质" aria-label="Permalink to &quot;组件的本质&quot;">​</a></h2><p>组件就是一组 DOM 元素的封装</p><h2 id="编译器" tabindex="-1">编译器 <a class="header-anchor" href="#编译器" aria-label="Permalink to &quot;编译器&quot;">​</a></h2><p>将 .vue 中的 template 转换成 render 函数</p><h2 id="模块组成整体" tabindex="-1">模块组成整体 <a class="header-anchor" href="#模块组成整体" aria-label="Permalink to &quot;模块组成整体&quot;">​</a></h2><p>组件的实现依赖于 <strong>渲染器</strong>，模版的编译依赖于 <strong>编译器</strong>，并且编译后生成的代码是根据渲染器和虚拟 DOM 的设计决定的，所以各个模块间是相互关联、相互制约的。</p><p>比如：渲染器在执行 patch 时需要寻找变更点，会消耗大量的性能。编译器在编译时其实可以明确的知道哪些是静态的哪些是动态变化的。因此 Vue 在设计时将两者结合，在编译阶段把这些信息提取出来，通过标识(<code>patchFlag: xxx</code>)来告诉渲染器，这样就能提升性能，减少不必要的计算。</p>`,18),p=[e];function t(r,c,B,i,y,d){return a(),n("div",null,p)}const h=s(o,[["render",t]]);export{A as __pageData,h as default};
