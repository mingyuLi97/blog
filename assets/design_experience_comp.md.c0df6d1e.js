import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.f14b72c3.js";const A=JSON.parse('{"title":"如何写一个 Vue 组件","description":"","frontmatter":{},"headers":[],"relativePath":"design/experience/comp.md"}'),p={name:"design/experience/comp.md"},o=l(`<h1 id="如何写一个-vue-组件" tabindex="-1">如何写一个 Vue 组件 <a class="header-anchor" href="#如何写一个-vue-组件" aria-label="Permalink to &quot;如何写一个 Vue 组件&quot;">​</a></h1><h2 id="什么是组件" tabindex="-1">什么是组件 <a class="header-anchor" href="#什么是组件" aria-label="Permalink to &quot;什么是组件&quot;">​</a></h2><p>在开发的时候经常会遇到重复的样式、类似的功能，比如文件上传、Toast 提示等，为了减少重复的开发，也为了功能、样式的统一，我们对其进行总结封装，这就是组件化。</p><h2 id="怎么规划组件" tabindex="-1">怎么规划组件 <a class="header-anchor" href="#怎么规划组件" aria-label="Permalink to &quot;怎么规划组件&quot;">​</a></h2><h4 id="_1-适当选用开源组件" tabindex="-1">1. 适当选用开源组件 <a class="header-anchor" href="#_1-适当选用开源组件" aria-label="Permalink to &quot;1. 适当选用开源组件&quot;">​</a></h4><p>社区为我们提供了很多优秀的开源组件库，像 <a href="https://ant.design/index-cn" target="_blank" rel="noreferrer">Ant Design</a>、<a href="https://vant-ui.github.io/vant/#/zh-CN" target="_blank" rel="noreferrer">vant</a>，里面的很多组件是可以拿来就用的，因此不必重复造轮子（个人观点）。</p><h4 id="_2-二次封装" tabindex="-1">2. 二次封装 <a class="header-anchor" href="#_2-二次封装" aria-label="Permalink to &quot;2. 二次封装&quot;">​</a></h4><p>当然有些组件需要适配自己公司产品风格的 UI、增加些通用的业务逻辑。二次封装是一个相对较优的选择。二次封装的话建议通过 <code>$attrs、$listeners</code>（不知道怎么用没关系，后面有讲怎么用） 进行属性透传，这样能最大限度的保证原组件的功能。👇 是我封装的 vant-picker 组件（根据业务对样式做了兼容）</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">@touchmove.prevent</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;fl_bg&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">van-picker</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">v-bind</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;$attrs&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">v-on</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;$listeners&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;vantPicker&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;faiz-picker-container&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vant/lib/picker/style&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">VanPicker</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;vant/lib/picker&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">VanPicker</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">inheritAttrs</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vantPickerInstance</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$refs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">vantPicker</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre></div><h4 id="_3-造轮子" tabindex="-1">3. 造轮子 <a class="header-anchor" href="#_3-造轮子" aria-label="Permalink to &quot;3. 造轮子&quot;">​</a></h4><p>大家可能最喜欢的就是造轮子，想怎么写就怎么写，想加什么功能就有什么功能。不过为了使用者能更好的用“轮子”我们在开发的时候应遵循一些原则。</p><h2 id="开发组件的原则" tabindex="-1">开发组件的原则 <a class="header-anchor" href="#开发组件的原则" aria-label="Permalink to &quot;开发组件的原则&quot;">​</a></h2><blockquote><p>一个组件是否优秀的指标之一就是看它的使用体验如何。</p></blockquote><h4 id="_1-vue-项目-props-数据传递的要明确-不要直接扔一个复杂对象。" tabindex="-1">1. Vue 项目 Props 数据传递的要明确, 不要直接扔一个复杂对象。 <a class="header-anchor" href="#_1-vue-项目-props-数据传递的要明确-不要直接扔一个复杂对象。" aria-label="Permalink to &quot;1. Vue 项目 Props 数据传递的要明确, 不要直接扔一个复杂对象。&quot;">​</a></h4><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">// bad</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">sn-button</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">:options</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;{ type:&#39;primary&#39;, shape:&#39;default&#39;, disable:true }&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &gt;默认按钮&lt;/</span><span style="color:#E06C75;">sn-button</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">// good</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">sn-button</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;primary&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">shape</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;default&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">disabled</span><span style="color:#ABB2BF;">&gt;默认按钮&lt;/</span><span style="color:#E06C75;">sn-button</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre></div><h4 id="_2-props-增加校验-重点、易错的应增加-validator-自定义校验-错误要给出提示。" tabindex="-1">2. Props 增加校验，重点、易错的应增加 validator 自定义校验, 错误要给出提示。 <a class="header-anchor" href="#_2-props-增加校验-重点、易错的应增加-validator-自定义校验-错误要给出提示。" aria-label="Permalink to &quot;2. Props 增加校验，重点、易错的应增加 validator 自定义校验, 错误要给出提示。&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">propF: {</span></span>
<span class="line"><span style="color:#ABB2BF;">  type: </span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  required: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  validator: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> ([</span><span style="color:#98C379;">&#39;success&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;warning&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;danger&#39;</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;propF 必须匹配[success&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;warning&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;danger]字符串中的一个&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><h4 id="_3-组件内应多提供插槽、事件。避免组件内处理业务-如果存在需要提供覆盖、操作方法。" tabindex="-1">3. 组件内应多提供插槽、事件。避免组件内处理业务，如果存在需要提供覆盖、操作方法。 <a class="header-anchor" href="#_3-组件内应多提供插槽、事件。避免组件内处理业务-如果存在需要提供覆盖、操作方法。" aria-label="Permalink to &quot;3. 组件内应多提供插槽、事件。避免组件内处理业务，如果存在需要提供覆盖、操作方法。&quot;">​</a></h4><h4 id="_4-良好的-ts-支持-对外暴露的类型应减少使用-any。" tabindex="-1">4. 良好的 TS 支持，对外暴露的类型应减少使用 <code>any</code>。 <a class="header-anchor" href="#_4-良好的-ts-支持-对外暴露的类型应减少使用-any。" aria-label="Permalink to &quot;4. 良好的 TS 支持，对外暴露的类型应减少使用 \`any\`。&quot;">​</a></h4><h4 id="_5-组件要有-namespace-概念-内部功能绝对不能影响整个页面。" tabindex="-1">5. 组件要有 namespace 概念，内部功能绝对不能影响整个页面。 <a class="header-anchor" href="#_5-组件要有-namespace-概念-内部功能绝对不能影响整个页面。" aria-label="Permalink to &quot;5. 组件要有 namespace 概念，内部功能绝对不能影响整个页面。&quot;">​</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">// ------------- css ---------------</span></span>
<span class="line"><span style="color:#abb2bf;">// bad</span></span>
<span class="line"><span style="color:#abb2bf;">div {</span></span>
<span class="line"><span style="color:#abb2bf;">    display: flex;</span></span>
<span class="line"><span style="color:#abb2bf;">}</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">// good 推荐使用 bem</span></span>
<span class="line"><span style="color:#abb2bf;">.van-button {</span></span>
<span class="line"><span style="color:#abb2bf;">    display: flex;</span></span>
<span class="line"><span style="color:#abb2bf;">}</span></span>
<span class="line"><span style="color:#abb2bf;">.van-button__content {</span></span>
<span class="line"><span style="color:#abb2bf;">    color: red;</span></span>
<span class="line"><span style="color:#abb2bf;">}</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">// ------------- js ----------------</span></span>
<span class="line"><span style="color:#abb2bf;">// bad</span></span>
<span class="line"><span style="color:#abb2bf;">window.foo = &#39;foo&#39;</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">// good 组件内的变量可以通过某个文件存储并导出</span></span>
<span class="line"><span style="color:#abb2bf;">export const foo = &#39;foo&#39;</span></span></code></pre></div><h4 id="_6-对一些非指定版本的第三方库应由-dependencies-转到-peerdependencies-防止项目存在不同版本依赖导致打包体积变大。" tabindex="-1">6. 对一些非指定版本的第三方库应由 <strong>dependencies</strong> 转到 <strong>peerDependencies</strong>，防止项目存在不同版本依赖导致打包体积变大。 <a class="header-anchor" href="#_6-对一些非指定版本的第三方库应由-dependencies-转到-peerdependencies-防止项目存在不同版本依赖导致打包体积变大。" aria-label="Permalink to &quot;6. 对一些非指定版本的第三方库应由 **dependencies** 转到 **peerDependencies**，防止项目存在不同版本依赖导致打包体积变大。&quot;">​</a></h4><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// dependencies 适合存放强依赖的版本 比如这里的 vue-lazy</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;dependencies&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;@babel/runtime&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;7.x&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;@vant/icons&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^1.7.1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;@vant/popperjs&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^1.1.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;@vue/babel-helper-vue-jsx-merge-props&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^1.0.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;vue-lazyload&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1.2.3&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// peerDependencies 存放项目所推荐使用的三方包版本</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;peerDependencies&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;vue&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&gt;= 2.6.0&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;devDependencies&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;@vant/cli&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^2.11.11&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;prettier&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;2.1.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;vue&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^2.6.12&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;vue-template-compiler&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^2.6.12&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span></code></pre></div><h4 id="_7-避免在全局或者原型上挂载变量、方法。不能完全否定这种实现方式-只能说是把双刃剑-好处是使用者开发方便-坏处就是增加了代码维护成本-以及出错排查的难度。而且这种方式不利于组件的-treeshaking-参考-vue2" tabindex="-1">7. 避免在全局或者原型上挂载变量、方法。不能完全否定这种实现方式，只能说是把双刃剑，好处是使用者开发方便，坏处就是增加了代码维护成本，以及出错排查的难度。而且这种方式不利于组件的 TreeShaking（参考 Vue2） <a class="header-anchor" href="#_7-避免在全局或者原型上挂载变量、方法。不能完全否定这种实现方式-只能说是把双刃剑-好处是使用者开发方便-坏处就是增加了代码维护成本-以及出错排查的难度。而且这种方式不利于组件的-treeshaking-参考-vue2" aria-label="Permalink to &quot;7. 避免在全局或者原型上挂载变量、方法。不能完全否定这种实现方式，只能说是把双刃剑，好处是使用者开发方便，坏处就是增加了代码维护成本，以及出错排查的难度。而且这种方式不利于组件的 TreeShaking（参考 Vue2）&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// bad</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;foo&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果有需要 可以通过 Vue.use 显示的声明</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fooPlugin</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 此处的 fooPlugin 功能就是向原型上挂载 &#39;foo&#39;</span></span></code></pre></div><h2 id="组件的实现" tabindex="-1">组件的实现 <a class="header-anchor" href="#组件的实现" aria-label="Permalink to &quot;组件的实现&quot;">​</a></h2><h3 id="组件的分类" tabindex="-1">组件的分类 <a class="header-anchor" href="#组件的分类" aria-label="Permalink to &quot;组件的分类&quot;">​</a></h3><h4 id="_1-基础组件" tabindex="-1">1. 基础组件 <a class="header-anchor" href="#_1-基础组件" aria-label="Permalink to &quot;1. 基础组件&quot;">​</a></h4><p>像 Toast 提示、Button 等基础组件。</p><h4 id="_2-ui-组件" tabindex="-1">2. UI 组件 <a class="header-anchor" href="#_2-ui-组件" aria-label="Permalink to &quot;2. UI 组件&quot;">​</a></h4><p>像头像展示、进度条等。</p><h4 id="_3-接口组件" tabindex="-1">3. 接口组件 <a class="header-anchor" href="#_3-接口组件" aria-label="Permalink to &quot;3. 接口组件&quot;">​</a></h4><p>像一些固定后端接口可以将其包装，好处是能统一管理、通参统一处理、同时可以利用 TS 的类型校验。</p><h4 id="_4-业务组件" tabindex="-1">4. 业务组件 <a class="header-anchor" href="#_4-业务组件" aria-label="Permalink to &quot;4. 业务组件&quot;">​</a></h4><p>有一些业务场景是完全相同的，A 页面、B 页面、D 页面都是相同的 UI 相同的逻辑，一点小差异也是可以通过配置改变的。这样的建议抽成组件，但是经常出现的问题是组件越写越大、功能越来越复杂。因此我们在实现这类组件时一定要避免一个文件（一处代码块）做多个逻辑，要对其解耦，对其进行分层处理，可以理解为组件内拆分出多个子组件，并在入口文件通过配置将各个子组件分配、组合（策略模式）。</p><h3 id="vue-组件的通信" tabindex="-1">Vue 组件的通信 <a class="header-anchor" href="#vue-组件的通信" aria-label="Permalink to &quot;Vue 组件的通信&quot;">​</a></h3><h4 id="_1-props-emit" tabindex="-1">1. <code>props &amp;&amp; $emit</code> <a class="header-anchor" href="#_1-props-emit" aria-label="Permalink to &quot;1. \`props &amp;&amp; $emit\`&quot;">​</a></h4><p>最基本的通信方案，也是最常用的，<strong>推荐</strong>使用。</p><h4 id="_2-parent、-children、-ref" tabindex="-1">2. <code>$parent、$children、$ref</code> <a class="header-anchor" href="#_2-parent、-children、-ref" aria-label="Permalink to &quot;2. \`$parent、$children、$ref\`&quot;">​</a></h4><p>在组件中我们能明确的知道 <code>$parent</code> 和 <code>$children</code>, 所以通过获取组件实例进行通信的方式很适用。</p><ul><li><code>$ref</code>：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在组件上，引用就指向组件实例</li><li><code>$parent</code>：访问父实例</li><li><code>$children</code>：子实例</li></ul><h4 id="_3-attrs、-listeners" tabindex="-1">3. <code>$attrs、$listeners</code> <a class="header-anchor" href="#_3-attrs、-listeners" aria-label="Permalink to &quot;3. \`$attrs、$listeners\`&quot;">​</a></h4><p>主要用于实现隔代通信</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">sub</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-bind</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;$attrs&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">v-on</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;$listeners&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#FFFFFF;">/</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Sub</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./SubChild.vue&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">inheritAttrs</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">components</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">Sub</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre></div><ul><li><code>$attrs</code></li></ul><p>包含了父作用域中不作为 prop 被识别 (且获取) 的 attribute 绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 <code>v-bind=&quot;$attrs&quot;</code>传入内部组件</p><ul><li><code>$listeners</code></li></ul><p>包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 <code>v-on=&quot;$listeners&quot;</code> 传入内部组件</p><ul><li><code>inheritAttrs</code></li></ul><p>用于控制是否启用默认的组件 attribute 透传行为, 默认情况下(<code>inheritAttrs: true</code>)子组件的 props 没有接收的 值会被透传</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// parent</span></span>
<span class="line"><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;limy&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// child</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">inheritAttrs</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 没有接收 age</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;name&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- inheritAttrs: false --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">data-v-5c5c8dbe</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">data-v-fb07bed6</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ccc&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- inheritAttrs: true --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">data-v-5c5c8dbe</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">data-v-fb07bed6</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">age</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;18&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ccc&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre></div><h4 id="eventbus、vuex、provide、inject" tabindex="-1"><code>EventBus</code>、<code>vuex</code>、<code>provide、inject</code> <a class="header-anchor" href="#eventbus、vuex、provide、inject" aria-label="Permalink to &quot;\`EventBus\`、\`vuex\`、\`provide、inject\`&quot;">​</a></h4><p>这个几个特点是作用范围过大，容易影响外部，或者受到外部影响。<strong>不推荐</strong></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>好的组件往往有着相同的特点：易用、稳定、体验好</p><p>作为开发者，我们需要规范的开发、设计以此来达到 👆 目的。</p><p>最后，建议大家多用开源、多学开源、少造重复轮子（狗头保命）</p>`,58),e=[o];function t(c,r,B,i,y,d){return a(),n("div",null,e)}const F=s(p,[["render",t]]);export{A as __pageData,F as default};
