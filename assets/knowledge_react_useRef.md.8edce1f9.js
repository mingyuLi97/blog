import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.fa80b722.js";const f=JSON.parse('{"title":"useRef","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/react/useRef.md","filePath":"knowledge/react/useRef.md"}'),e={name:"knowledge/react/useRef.md"},o=l(`<h1 id="useref" tabindex="-1">useRef <a class="header-anchor" href="#useref" aria-label="Permalink to &quot;useRef&quot;">​</a></h1><h2 id="获取-dom" tabindex="-1">获取 DOM <a class="header-anchor" href="#获取-dom" aria-label="Permalink to &quot;获取 DOM&quot;">​</a></h2><p>通过 ref.current 就可以拿到对应的 DOM 元素。</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">App</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">iptEl</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">useRef</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">toFocus</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">iptEl</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">current</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">focus</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">ref</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">iptEl</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">toFocus</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;focus&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><h2 id="存储值" tabindex="-1">存储值 <a class="header-anchor" href="#存储值" aria-label="Permalink to &quot;存储值&quot;">​</a></h2><ul><li>你可以在重新渲染之间 存储信息（不像是普通对象，每次渲染都会重置）。</li><li>改变它 <strong>不会触发重新渲染</strong>（不像是 state 变量，会触发重新渲染）。</li><li>state 的值是个 capture value，也就是每次渲染中任意处的 state 都是不变的，但是 ref 不一样，ref 就是一个普通的 js 对象，因此在任意时刻拿到的都是最新的</li><li>对于你的组件的每个副本来说，这些信息都是本地的（不像是外面的变量，是共享的）。</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/7071998820225122335" target="_blank" rel="noreferrer">https://juejin.cn/post/7071998820225122335</a></li><li><a href="https://zh-hans.react.dev/reference/react/useRef" target="_blank" rel="noreferrer">https://zh-hans.react.dev/reference/react/useRef</a></li></ul>`,8),t=[o];function p(r,c,B,i,y,u){return a(),n("div",null,t)}const F=s(e,[["render",p]]);export{f as __pageData,F as default};
