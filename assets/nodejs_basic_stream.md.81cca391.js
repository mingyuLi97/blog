import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.fa80b722.js";const d=JSON.parse('{"title":"Stream","description":"","frontmatter":{},"headers":[],"relativePath":"nodejs/basic/stream.md","filePath":"nodejs/basic/stream.md"}'),p={name:"nodejs/basic/stream.md"},o=l(`<h1 id="stream" tabindex="-1">Stream <a class="header-anchor" href="#stream" aria-label="Permalink to &quot;Stream&quot;">​</a></h1><p>Stream 是 Node.js 中的一个抽象接口，它可以用来处理<strong>流式数据</strong>。</p><p>Stream 将数据分成一小块一小块的，然后逐步处理每一块数据。这种处理方式可以<strong>减少内存占用，提高数据传输和处理效率</strong>。</p><h2 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型&quot;">​</a></h2><ul><li><p>Readable：可读流是一种用于从源中读取数据的流。例如从文件中读取数据或从 HTTP 请求中读取数据。</p></li><li><p>Writable：可写流是一种用于向目标中写入数据的流。例如向文件中写入数据或向 HTTP 响应中写入数据。</p></li><li><p>Duplex：双工流是一种同时支持读取和写入的流，例如 SSH 会话。</p></li><li><p>Transform：转换流是一种双工流，可以在读取和写入数据时对数据进行转换。例如在压缩或加密数据时使用。</p></li></ul><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><h4 id="readablestream" tabindex="-1">readableStream <a class="header-anchor" href="#readablestream" aria-label="Permalink to &quot;readableStream&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;fs&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">readableStream</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createReadStream</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./template.html&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">highWaterMark</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">readableStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;data&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">chunk</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">chunk</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">readableStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;end&#39;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;读取完成&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre></div><h4 id="pipe" tabindex="-1">pipe() <a class="header-anchor" href="#pipe" aria-label="Permalink to &quot;pipe()&quot;">​</a></h4><p>将一个可读流的数据传输到一个可写流中</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;fs&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">readableStream</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createReadStream</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;input.txt&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">writableStream</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createWriteStream</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;output.txt&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将 input.txt 内容写入到 output.txt，相当于 copy</span></span>
<span class="line"><span style="color:#E5C07B;">readableStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pipe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">writableStream</span><span style="color:#ABB2BF;">);</span></span></code></pre></div>`,11),e=[o];function t(r,c,B,y,i,F){return a(),n("div",null,e)}const C=s(p,[["render",t]]);export{d as __pageData,C as default};
