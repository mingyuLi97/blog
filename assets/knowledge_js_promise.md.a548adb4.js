import{o as E,c as m,b as B,u as t,a as c}from"./app.d43055c5.js";Promise.all=o=>{const n=[];let a=0;return new Promise((l,p)=>{o.forEach((s,e)=>{Promise.resolve(s).then(r=>{n[e]=r,++a===o.length&&l(n)}).catch(p)})})};Promise.race=o=>new Promise((n,a)=>{o.forEach(l=>Promise.resolve(l).then(n,a))});Promise.any=o=>{const n=[];let a=0;return new Promise((l,p)=>{o.forEach((s,e)=>{Promise.resolve(s).then(l,r=>{n[e]=r,++a===o.length&&p(new AggregateError(n))})})})};Promise.allSettled=o=>{const n=[];let a=0;return new Promise((l,p)=>{o.forEach((s,e)=>{Promise.resolve(s).then(r=>{n.push({status:"fulfilled",value:r})}).catch(r=>{n.push({status:"rejected",reason:r})}).finally(r=>{++a===o.length&&l(n)})})})};function y(){const o=Promise.resolve("p1"),n=new Promise((s,e)=>{setTimeout(()=>{s("p2 \u5EF6\u65F6\u4E00\u79D2")},1e3)}),a=new Promise((s,e)=>{setTimeout(()=>{s("p3 \u5EF6\u65F6\u4E24\u79D2")},2e3)}),l=Promise.reject("p4 rejected"),p=new Promise((s,e)=>{setTimeout(()=>{e("p5 rejected \u5EF6\u65F61.5\u79D2")},1500)});return[o,n,a,l,p]}function i(){console.log("---------------- Promise.all ---------------------");const[o,n,a,l,p]=y();Promise.all([o,n,a]).then(s=>{console.log(s)}).catch(s=>console.log(s)),Promise.all([o,n,l]).then(s=>{console.log(s)}).catch(s=>console.log(s)),Promise.all([o,n,p]).then(s=>{console.log(s)}).catch(s=>console.log(s)),Promise.all([o,l,p]).then(s=>{console.log(s)}).catch(s=>console.log(s))}function F(){console.log("---------------- Promise.race ---------------------");const[o,n,a,l,p]=y();Promise.race([o,n,a]).then(s=>console.log(s)).catch(s=>console.log(s)),Promise.race([l,n,a]).then(s=>console.log(s)).catch(s=>console.log(s)),Promise.race([p,n,a]).then(s=>console.log(s)).catch(s=>console.log(s))}function A(){console.log("---------------- Promise.any ---------------------");const[o,n,a,l,p]=y();Promise.any([o,n,a]).then(s=>console.log(s)).catch(s=>console.log(s)),Promise.any([o,n,l]).then(s=>console.log(s)).catch(s=>console.log(s)),Promise.any([n,l,p]).then(s=>console.log(s)).catch(s=>console.log(s)),Promise.any([l,p]).then(s=>console.log(s)).catch(s=>console.log(s))}function C(){console.log("---------------- Promise.allSettled ---------------------");const[o,n,a,l,p]=y();Promise.allSettled([o,n,a]).then(s=>console.log(s)).catch(s=>console.log(s)),Promise.allSettled([o,n,l]).then(s=>console.log(s)).catch(s=>console.log(s)),Promise.allSettled([l,p]).then(s=>console.log(s)).catch(s=>console.log(s))}const d=c('<h1 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-hidden="true">#</a></h1><h2 id="promise-resolve" tabindex="-1">Promise.resolve <a class="header-anchor" href="#promise-resolve" aria-hidden="true">#</a></h2><ol><li><code>Promise.resolve(42)</code> \u76F8\u5F53\u4E8E <code>new Promise(function(resolve){ resolve(42); });</code></li><li>\u5C06 thenable \u5BF9\u8C61\u8F6C\u6362\u4E3A Promise \u5BF9\u8C61</li></ol><h2 id="promise-all" tabindex="-1">Promise.all <a class="header-anchor" href="#promise-all" aria-hidden="true">#</a></h2><ol><li>\u53C2\u6570\u4E3A <code>Promise&lt;any&gt;[]</code></li><li>\u8FD4\u56DE\u503C\u8FD8\u662F\u4E00\u4E2A Promise \u5BF9\u8C61</li><li>\u53EA\u8981\u6709\u4E00\u4E2A\u5931\u8D25\uFF0CPromise.all \u5C31\u4F1A\u6267\u884C <code>reject()</code></li></ol>',5),h=c(`<div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#7F848E;">/**</span></span>
<span class="line"><span style="color:#7F848E;"> * </span><span style="color:#C678DD;">@param</span><span style="color:#7F848E;"> </span><span style="color:#E5C07B;">{Promise[]}</span><span style="color:#7F848E;"> </span><span style="color:#E06C75;">promises</span></span>
<span class="line"><span style="color:#7F848E;"> */</span></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">promises</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">promises</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">idx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;">//</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">idx</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">promises</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reject</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre></div><h2 id="promise-race" tabindex="-1">Promise.race <a class="header-anchor" href="#promise-race" aria-hidden="true">#</a></h2><ol><li>\u53C2\u6570\u4E3A <code>Promise&lt;any&gt;[]</code></li><li>\u91C7\u7528\u7B2C\u4E00\u4E2A\u5B8C\u6210\u4E86\u7684(resolve or reject) Promise \u7684\u503C</li></ol>`,3),u=c(`<div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">race</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">promises</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">promises</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reject</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre></div><h2 id="promise-any" tabindex="-1">Promise.any <a class="header-anchor" href="#promise-any" aria-hidden="true">#</a></h2><p>\u4E0E Promise.all \u53EF\u4EE5\u770B\u505A\u662F\u76F8\u53CD\u7684\u3002Promise.any \u4E2D\u53EA\u8981\u6709\u4E00\u4E2A Promise \u5B9E\u4F8B\u6210\u529F\u5C31\u6210\u529F\uFF0C\u53EA\u6709\u5F53\u6240\u6709\u7684 Promise \u5B9E\u4F8B\u5931\u8D25\u65F6 Promise.any \u624D\u5931\u8D25\uFF0C\u6B64\u65F6 Promise.any \u4F1A\u628A\u6240\u6709\u7684\u5931\u8D25/\u9519\u8BEF\u96C6\u5408\u5728\u4E00\u8D77\uFF0C\u8FD4\u56DE\u4E00\u4E2A\u5931\u8D25\u7684 \xA0promise\xA0 \u548C AggregateError \u7C7B\u578B\u7684\u5B9E\u4F8B</p>`,3),P=c(`<div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">any</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">promises</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">errs</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">promises</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">idx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">errs</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">idx</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">promises</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">AggregateError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">errs</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      });</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre></div><h2 id="promise-allsettled" tabindex="-1">Promise.allSettled <a class="header-anchor" href="#promise-allsettled" aria-hidden="true">#</a></h2><ol><li>\u53C2\u6570\u4E3A <code>Promise&lt;any&gt;[]</code></li><li>\u8FD4\u56DE\u6240\u6709 Promise \u6267\u884C\u540E\u7684\u8FD4\u56DE\u7ED3\u679C\uFF0C\u5BF9\u4E8E\u6BCF\u4E2A\u7ED3\u679C\u5BF9\u8C61\uFF0C\u90FD\u6709\u4E00\u4E2A status \u5B57\u7B26\u4E32\u3002\u5982\u679C\u5B83\u7684\u503C\u4E3A fulfilled\uFF0C\u5219\u7ED3\u679C\u5BF9\u8C61\u4E0A\u5B58\u5728\u4E00\u4E2A value \u3002\u5982\u679C\u503C\u4E3A rejected\uFF0C\u5219\u5B58\u5728\u4E00\u4E2A reason \u3002value\uFF08\u6216 reason \uFF09\u53CD\u6620\u4E86\u6BCF\u4E2A promise \u51B3\u8BAE\uFF08\u6216\u62D2\u7EDD\uFF09\u7684\u503C\u3002</li></ol>`,3),g=c(`<div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allSettled</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">promises</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;">/**</span></span>
<span class="line"><span style="color:#7F848E;">   * </span><span style="color:#C678DD;">@type</span><span style="color:#7F848E;"> </span><span style="color:#E5C07B;">{{status: &#39;fulfilled&#39; | &#39;rejected&#39;, reason?: any, value?:any}[]}</span></span>
<span class="line"><span style="color:#7F848E;">   */</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">promises</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">idx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;fulfilled&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">res</span></span>
<span class="line"><span style="color:#ABB2BF;">          });</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;rejected&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">reason</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">err</span></span>
<span class="line"><span style="color:#ABB2BF;">          });</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">finally</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">promises</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        });</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre></div><h2 id="\u53C2\u8003" tabindex="-1">\u53C2\u8003 <a class="header-anchor" href="#\u53C2\u8003" aria-hidden="true">#</a></h2><ul><li><a href="https://juejin.cn/post/7069805387490263047" target="_blank" rel="noreferrer">\u6398\u91D1\uFF1A\u5B57\u8282\u98DE\u4E66\u9762\u8BD5\u2014\u2014\u8BF7\u5B9E\u73B0 promise.all</a></li></ul>`,3),v=JSON.parse('{"title":"Promise","description":"","frontmatter":{},"headers":[{"level":2,"title":"Promise.resolve","slug":"promise-resolve","link":"#promise-resolve","children":[]},{"level":2,"title":"Promise.all","slug":"promise-all","link":"#promise-all","children":[]},{"level":2,"title":"Promise.race","slug":"promise-race","link":"#promise-race","children":[]},{"level":2,"title":"Promise.any","slug":"promise-any","link":"#promise-any","children":[]},{"level":2,"title":"Promise.allSettled","slug":"promise-allsettled","link":"#promise-allsettled","children":[]},{"level":2,"title":"\u53C2\u8003","slug":"\u53C2\u8003","link":"#\u53C2\u8003","children":[]}],"relativePath":"knowledge/js/promise.md"}'),D={name:"knowledge/js/promise.md"},f=Object.assign(D,{setup(o){return(n,a)=>(E(),m("div",null,[d,B("p",null,[B("button",{class:"brand-c-button",onClick:a[0]||(a[0]=(...l)=>t(i)&&t(i)(...l))},"runPromiseAll")]),h,B("p",null,[B("button",{class:"brand-c-button",onClick:a[1]||(a[1]=(...l)=>t(F)&&t(F)(...l))},"runPromiseRace")]),u,B("p",null,[B("button",{class:"brand-c-button",onClick:a[2]||(a[2]=(...l)=>t(A)&&t(A)(...l))},"runPromiseAny")]),P,B("p",null,[B("button",{class:"brand-c-button",onClick:a[3]||(a[3]=(...l)=>t(C)&&t(C)(...l))},"runPromiseAllSettled")]),g]))}});export{v as __pageData,f as default};
