import{_ as a,o as e,c as r,R as t}from"./chunks/framework.d45ee533.js";const _=JSON.parse('{"title":"浏览器多进程架构","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/browser/framework.md"}'),o={name:"knowledge/browser/framework.md"},i=t('<h1 id="浏览器多进程架构" tabindex="-1">浏览器多进程架构 <a class="header-anchor" href="#浏览器多进程架构" aria-label="Permalink to &quot;浏览器多进程架构&quot;">​</a></h1><h2 id="chrome-设计" tabindex="-1">Chrome 设计 <a class="header-anchor" href="#chrome-设计" aria-label="Permalink to &quot;Chrome 设计&quot;">​</a></h2><p><img src="https://limy-1309594960.cos.ap-beijing.myqcloud.com/202210031536042.png" alt=""></p><h4 id="浏览器主进程" tabindex="-1">浏览器主进程 <a class="header-anchor" href="#浏览器主进程" aria-label="Permalink to &quot;浏览器主进程&quot;">​</a></h4><p>主要负责页面显示、用户交互、子进程管理、文件存储等功能。</p><h4 id="渲染进程" tabindex="-1">渲染进程 <a class="header-anchor" href="#渲染进程" aria-label="Permalink to &quot;渲染进程&quot;">​</a></h4><p>核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页。</p><ul><li>排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。</li><li>出于安全考虑，渲染进程都是运行在沙箱模式下。</li></ul><h4 id="gpu-进程" tabindex="-1">GPU 进程 <a class="header-anchor" href="#gpu-进程" aria-label="Permalink to &quot;GPU 进程&quot;">​</a></h4><p>网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，使得 GPU 成为浏览器普遍的需求，最后，Chrome 在其多进程架构上也引入了 GPU 进程。</p><h4 id="网络进程" tabindex="-1">网络进程 <a class="header-anchor" href="#网络进程" aria-label="Permalink to &quot;网络进程&quot;">​</a></h4><p>主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，之后独立处理成为一个单独的进程。</p><h4 id="插件进程" tabindex="-1">插件进程 <a class="header-anchor" href="#插件进程" aria-label="Permalink to &quot;插件进程&quot;">​</a></h4><p>主要负责控制一个网页用到的所有插件。</p><p>因为插件容易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</p><h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h2><p><strong>稳定性</strong>：进程之间相互隔离，某一个进程出现问题不会影响到其他进程。</p><p>例如插件是比较容易出现问题的模块，如果是运行在同一个进程里面，插件的意外崩溃会引起整个浏览器的崩溃。</p><p><strong>流畅性</strong>：网络请求、页面渲染、JavaScript 执行环境和插件等运行在不同的进程里面，减少了线程阻塞的可能性。</p><p>例如 JavaScript 是运行在渲染进程中的，所以即使 JavaScript 阻塞了渲染进程，影响到的也只是当前的渲染页面，而并不会影响浏览器和其他页面，因为其他页面的脚本是运行在它们自己的渲染进程中的。</p><p><strong>安全性</strong>：浏览器在系统层面上限定了不同进程的权限。</p><p>例如渲染进程是运行在安全沙箱里面的，因为渲染进程所有的内容都是通过网络获取的，会存在一些恶意代码利用浏览器漏洞对系统进行攻击，所以运行在渲染进程里面的代码是不被信任的。</p><h2 id="不足" tabindex="-1">不足 <a class="header-anchor" href="#不足" aria-label="Permalink to &quot;不足&quot;">​</a></h2><p>不过凡事都有两面性，虽然浏览器的多进程模型提升了浏览器的稳定性、流畅性和安全性，但是也带来了一些其它的问题：例如 更高的资源占用和更复杂的体系结构。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6974796760489132069" target="_blank" rel="noreferrer">掘金</a></li></ul>',26),l=[i];function h(n,s,c,p,d,u){return e(),r("div",null,l)}const b=a(o,[["render",h]]);export{_ as __pageData,b as default};
