import{_ as e,o as t,c as a,Q as o}from"./chunks/framework.fa80b722.js";const u=JSON.parse('{"title":"HTTP","description":"","frontmatter":{},"headers":[],"relativePath":"network/basic/http.md","filePath":"network/basic/http.md"}'),l={name:"network/basic/http.md"},i=o('<h1 id="http" tabindex="-1">HTTP <a class="header-anchor" href="#http" aria-label="Permalink to &quot;HTTP&quot;">​</a></h1><h2 id="队头阻塞-head-of-line-blocking" tabindex="-1"><a href="https://juejin.cn/post/7049296242924322830" target="_blank" rel="noreferrer">队头阻塞</a> (Head-Of-Line Blocking) <a class="header-anchor" href="#队头阻塞-head-of-line-blocking" aria-label="Permalink to &quot;[队头阻塞](https://juejin.cn/post/7049296242924322830) (Head-Of-Line Blocking)&quot;">​</a></h2><p>队头阻塞主要是 TCP 协议的可靠性机制引入的。TCP 使用序列号来标识数据的顺序，数据必须按照顺序处理，如果前面的数据丢失，后面的数据就算到达了也不会通知应用层来处理。</p><ul><li>单个数据流的发送：遇到错误的、丢失的包会出发重传，阻塞窗口移动</li><li>多个数据流的发送：TCP 通道里的流是混合的，不能独立的分割，所以当一个流阻塞时，其所有流都会被阻塞</li></ul><h3 id="解决" tabindex="-1">解决： <a class="header-anchor" href="#解决" aria-label="Permalink to &quot;解决：&quot;">​</a></h3><ul><li>将同一页面的资源分散到不同域名下，提升连接上限。 <strong>Chrome 有个机制，对于同一个域名，默认允许同时建立 6 个 TCP 持久连接</strong>，使用持久连接时，虽然能公用一个 TCP 管道，<strong>但是在一个管道中同一时刻只能处理一个请求</strong>，在当前的请求没有结束之前，其他的请求只能处于阻塞状态。另外如果在同一个域名下同时有 10 个请求发生，那么其中 4 个请求会进入排队等待状态，直至进行中的请求完成。</li><li>减少请求次数 <ul><li>精灵图</li><li>图片转成 base64 嵌入到 css 文件中</li><li>webpack 打包时将多个文件 合并成一个体积更大的</li></ul></li></ul><h2 id="http1-1-的改进" tabindex="-1">HTTP1.1 的改进 <a class="header-anchor" href="#http1-1-的改进" aria-label="Permalink to &quot;HTTP1.1 的改进&quot;">​</a></h2><ol><li><strong>改进持久连接</strong></li></ol><p>长链接能够有效的减少 3 次握手和 4 次挥手过多导致的不必要开销 HTTP1.0 需要使用 <code>Connection: keep-alive</code> 参数来告诉服务器需要建立长链接，HTTP1.1 默认开启</p><ol start="2"><li><strong>不成熟的管线化技术</strong></li></ol><p>为了解决对队头阻塞，允许在第一个应答被完全发送之前就发送第二个请求，以降低通信延迟，但是服务器依然需要根据请求的顺序来恢复浏览器的请求，所以并不能彻底的解决这个问题，</p><ol start="3"><li><strong>提供虚拟主机支持</strong></li></ol><p>在 HTTP/1.0 中，每个域名绑定了一个唯一的 IP 地址，因此一个服务器只能支持一个域名。但是随着虚拟主机技术的发展，需要实现在一台物理主机上绑定多个虚拟主机，每个虚拟主机都有自己的单独的域名，这些单独的域名都公用同一个 IP 地址。 因此，HTTP/1.1 的请求头中增加了 Host 字段，用来表示当前的域名地址，这样服务器就可以根据不同的 Host 值做不同的处理。</p><ol start="4"><li><strong>改进缓存机制</strong></li></ol><p>在 HTTP1.0 中主要使用 header 里的 <code>If-Modified-Since</code>（比较资源最后的更新时间是否一致）,<code>Expires</code>（资源的过期时间（取决于客户端本地时间）） 来做为缓存判断的标准。 HTTP1.1 则引入了更多的 <a href="/blog/knowledge/browser/cache.html">缓存控制</a> 策略：</p><ul><li><code>Entity tag</code>：资源的匹配信息</li><li><code>If-Unmodified-Since</code>：比较资源最后的更新时间是否不一致</li><li><code>If-Match</code>：比较 ETag 是否一致</li><li><code>If-None-Match</code>：比较 ETag 是否不一致</li></ul><p>等更多可供选择的缓存头来控制缓存策略。</p><h2 id="http1-1-缺陷" tabindex="-1">HTTP1.1 - 缺陷 <a class="header-anchor" href="#http1-1-缺陷" aria-label="Permalink to &quot;HTTP1.1 - 缺陷&quot;">​</a></h2><ul><li><p><strong>高延迟 — 队头阻塞</strong></p></li><li><p><strong>无状态，协议开销大</strong></p><p>没有相应的压缩传输优化方案。 HTTP/1.1 在使用时，header 里携带的内容过大，在一定程度上增加了传输的成本，并且每次请求 header 基本不怎么变化，尤其在移动端增加用户流量。</p></li><li><p><strong>明文传输 — 不安全性</strong></p></li><li><p><strong>不支持服务端推送</strong></p></li></ul><h2 id="http2-的改进" tabindex="-1">HTTP2 的改进 <a class="header-anchor" href="#http2-的改进" aria-label="Permalink to &quot;HTTP2 的改进&quot;">​</a></h2><ul><li><p><strong>二进制传输</strong></p></li><li><p><strong>Header 压缩</strong></p><ul><li>减小 header 的体积</li><li>在客户端服务端建立字典，通过 “首部表” 跟踪之前的数据，对于相同的数据不再发送</li></ul></li><li><p><strong>多路复用</strong></p><p>HTTP2.0 中，有两个概念非常重要：帧（frame）和流（stream）。 帧是最小的数据单位，每个帧会标识出该帧属于哪个流，流是多个帧组成的数据流。 所谓多路复用，即在一个 TCP 连接中存在多个流，即可以同时发送多个请求，对端可以通过帧中的表示知道该帧属于哪个请求。在客户端，这些帧乱序发送，到对端后再根据每个帧首部的流标识符重新组装。通过该技术，可以避免 HTTP 旧版本的队头阻塞问题，极大提高传输性能。</p></li><li><p><strong>服务端推送</strong></p><p>主动向客户端发送消息。比如，在浏览器刚请求 HTML 的时候就提前把可能会用到的 JS、CSS 文件发给客户端，减少等待的延迟</p></li><li><p><strong>更安全</strong></p><p>HTTP2.0 使用了 TLS 的拓展 ALPN 做为协议升级，除此之外，HTTP2.0 对 tls 的安全性做了近一步加强，通过黑名单机制禁用了几百种不再安全的加密算法。</p></li></ul><h2 id="http2-缺陷" tabindex="-1">HTTP2 - 缺陷 <a class="header-anchor" href="#http2-缺陷" aria-label="Permalink to &quot;HTTP2 - 缺陷&quot;">​</a></h2><ul><li><p><strong>丢包下性能差</strong></p><p>TCP 为了保证传输的可靠性，有个 <strong>丢包重传</strong> 的机制，也就是丢包后整个 TCP 通道的请求都需要重新请求。HTTP1.1 时我们可以创建多个 TCP 通道，一个有问题不会影响到其他的，但是 HTTP2.0 所有的请求都在一个通道，所以丢包下性能会差</p></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 TCP 里，如果一个 segment 传递丢失，那么后续 segment 乱序到达，也不会被应用层使用，只到丢失的 segment 重传成功为止，因此 TCP 实现的 HTTP2 的多路复用能力受到制约</p></div><ul><li><p><strong>多路复用导致服务器压力变大</strong></p><p>多路复用会让所有请求同时发送，所以会造成请求的短暂爆发，导致服务器压力增加</p></li><li><p><strong>多路复用容易 timeout</strong></p></li></ul><h2 id="http3" tabindex="-1">HTTP3 <a class="header-anchor" href="#http3" aria-label="Permalink to &quot;HTTP3&quot;">​</a></h2><h3 id="_1-使用-quic-quick-udp-internet-connection-协议" tabindex="-1">1. 使用 <code>QUIC（Quick udp internet connection）</code> 协议 <a class="header-anchor" href="#_1-使用-quic-quick-udp-internet-connection-协议" aria-label="Permalink to &quot;1. 使用 `QUIC（Quick udp internet connection）` 协议&quot;">​</a></h3><ul><li>底层使用 UDP 传输， UDP 是 “无连接” 的，因此不需要 “握手、挥手”，故速度很快</li><li>虽然 UDP 不提供可靠性的传输，但 QUIC 在 UDP 的基础之上增加了一层来保证数据可靠性传输。它提供了数据包重传、拥塞控制以及其他一些 TCP 中存在的特性。</li><li>集成了 TLS 加密功能。</li><li>多路复用，彻底解决 TCP 中队头阻塞的问题（QUIC 实现了在同一物理连接上可以有多个独立的逻辑数据流，实现了数据流的独立传输）。</li><li>实现动态可插拔，在应用层实现了拥塞控制算法，可以随时切换。应用程序层面就能实现不同的拥塞控制算法，不需要操作系统，不需要内核支持。这是一个飞跃，因为传统的 TCP 拥塞控制，必须要端到端的网络协议栈支持，才能实现控制效果。而内核和操作系统的部署成本非常高，升级周期很长，这在产品快速迭代，网络爆炸式增长的今天，显然有点满足不了需求。</li><li>报文头和报文体分别进行认证和加密处理，保障安全性。</li></ul><h3 id="quic-怎么保证数据的可靠性" tabindex="-1">QUIC 怎么保证数据的可靠性 <a class="header-anchor" href="#quic-怎么保证数据的可靠性" aria-label="Permalink to &quot;QUIC 怎么保证数据的可靠性&quot;">​</a></h3><p>QUIC 使用的 <code>Packet Number</code> 单调递增的设计，可以让数据包不再像 TCP 那样必须有序确认，QUIC 支持乱序确认，当数据包 <code>Packet N</code> 丢失后，只要有新的已接收数据包确认，当前窗口就会继续向右滑动。待发送端获知数据包 <code>Packet N</code> 丢失后，会将需要重传的数据包放到待发送队列，重新编号比如数据包 <code>Packet N+M</code> 后重新发送给接收端，对重传数据包的处理跟发送新的数据包类似，这样就不会因为丢包重传将当前窗口阻塞在原地，从而解决了队头阻塞问题。那么，既然重传数据包的 <code>Packet N+M</code> 与丢失数据包的 <code>Packet N</code> 编号并不一致，我们怎么确定这两个数据包的内容一样呢？</p><p>QUIC 使用 <code>Stream ID</code> 来标识当前数据流属于哪个资源请求，这同时也是数据包多路复用传输到接收端后能正常组装的依据。重传的数据包 <code>Packet N+M</code> 和丢失的数据包 <code>Packet N</code> 单靠 <code>Stream ID</code> 的比对一致仍然不能判断两个数据包内容一致，还需要再新增一个字段 <code>Stream Offset</code>，标识当前数据包在当前 <code>Stream ID</code> 中的字节偏移量。</p><p>有了 <code>Stream Offset</code> 字段信息，属于同一个 <code>Stream ID</code> 的数据包也可以乱序传输了（HTTP/2 中仅靠 <code>Stream ID</code> 标识，要求同属于一个 <code>Stream ID</code> 的数据帧必须有序传输），通过两个数据包的 <code>Stream ID</code> 与 <code>Stream Offset</code> 都一致，就说明这两个数据包的内容一致。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>HTTP/1.1 有两个主要的缺点：安全不足和性能不高。</li><li>HTTP/2 完全兼容 HTTP/1，是“更安全的 HTTP、更快的 HTTPS&quot;，头部压缩、多路复用等技术可以充分利用带宽，降低延迟，从而大幅度提高上网体验。</li><li>QUIC 基于 UDP 实现，是 HTTP/3 中的底层支撑协议。该协议基于 UDP，又汲取了 TCP 中的精华，实现了既快又可靠的协议。</li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6844904001528397837" target="_blank" rel="noreferrer">掘金：http 发展史(http0.9、http1.0、http1.1、http2、http3)梳理笔记</a></li><li><a href="https://juejin.cn/post/6995109407545622542" target="_blank" rel="noreferrer">掘金：解读 HTTP1/HTTP2/HTTP3</a></li><li><a href="https://juejin.cn/post/6904423377499324423" target="_blank" rel="noreferrer">掘金：回顾 HTTP1.0，HTTP1.1，HTTP2.0 的区别</a></li><li><a href="https://juejin.cn/post/7077439753993322510" target="_blank" rel="noreferrer">掘金：10 分钟讲完 QUIC 协议</a></li><li><a href="https://zhuanlan.zhihu.com/p/32553477" target="_blank" rel="noreferrer">知乎：科普：QUIC 协议原理分析</a></li><li><a href="https://www.biaodianfu.com/quic.html#Stream%E5%B1%82" target="_blank" rel="noreferrer">网页：网络通讯协议只 QUIC - 标点符</a></li></ul>',36),r=[i];function n(c,s,d,h,p,T){return t(),a("div",null,r)}const g=e(l,[["render",n]]);export{u as __pageData,g as default};
