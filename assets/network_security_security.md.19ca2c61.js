import{_ as e,o as a,c as i,R as l}from"./chunks/framework.d45ee533.js";const f=JSON.parse('{"title":"网络安全","description":"","frontmatter":{},"headers":[],"relativePath":"network/security/security.md"}'),r={name:"network/security/security.md"},t=l('<h1 id="网络安全" tabindex="-1">网络安全 <a class="header-anchor" href="#网络安全" aria-label="Permalink to &quot;网络安全&quot;">​</a></h1><h2 id="xss-攻击" tabindex="-1">XSS 攻击 <a class="header-anchor" href="#xss-攻击" aria-label="Permalink to &quot;XSS 攻击&quot;">​</a></h2><p>xss 是跨站脚本攻击，攻击者在目标网站上注入恶意脚本，在用户访问时执行脚本，从而危害数据安全。常见的攻击方式有三种</p><ol><li>存储型 XSS，攻击者将恶意代码提交到服务器，数据库，当用户访问时返回给浏览器恶意代码，常见于发帖 评论</li><li>反射型 XSS，修改 url 参数 加入攻击代码,常见于搜索，跳转</li><li>DOM 型 XSS 前端页面中可输入的地方 如输入框加入攻击代码，页面执行时 恶意代码字符通过 innerhtml onload href 等漏洞执行</li></ol><h3 id="防御" tabindex="-1">防御 <a class="header-anchor" href="#防御" aria-label="Permalink to &quot;防御&quot;">​</a></h3><ol><li>httpOnly: 在 cookie 中设置 HttpOnly 属性后，js 脚本将无法读取到 cookie 信息</li><li>对用户的输入，服务器的输出进行校验、过滤</li><li>特殊字符编码转译</li><li>针对富文本等复杂的采用白名单过滤</li><li>内容安全策略（CSP）</li></ol><h2 id="csrf-攻击" tabindex="-1">CSRF 攻击 <a class="header-anchor" href="#csrf-攻击" aria-label="Permalink to &quot;CSRF 攻击&quot;">​</a></h2><p>跨站请求伪造，盗用用户身份，发送恶意请求。 <img src="https://limy-1309594960.cos.ap-beijing.myqcloud.com/blog/CSRF.png" alt="csrf"></p><ol><li>登录受信任网站 A ，并在本地生成保存 Cookie；</li><li>在不登出 A 情况下，访问病毒网站 B；</li></ol><h3 id="防御-1" tabindex="-1">防御 <a class="header-anchor" href="#防御-1" aria-label="Permalink to &quot;防御&quot;">​</a></h3><ol><li>验证码，强制用户必须与应用交互后才能完成请求</li><li>限制 referer，严格限制来源，但是不能 100%有限，因为服务器不是什么时候都能取到 referer 低版本可以伪造 referer</li><li>token(最佳)</li></ol>',11),o=[t];function s(c,n,h,d,_,u){return a(),i("div",null,o)}const S=e(r,[["render",s]]);export{f as __pageData,S as default};
