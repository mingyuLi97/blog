import{_ as a,o as e,c as l,R as i}from"./chunks/framework.d45ee533.js";const b=JSON.parse('{"title":"打包流程","description":"","frontmatter":{},"headers":[],"relativePath":"engineer/webpack/build_flow.md"}'),r={name:"engineer/webpack/build_flow.md"},o=i('<h1 id="打包流程" tabindex="-1">打包流程 <a class="header-anchor" href="#打包流程" aria-label="Permalink to &quot;打包流程&quot;">​</a></h1><h2 id="_1-合并配置项" tabindex="-1">1. 合并配置项 <a class="header-anchor" href="#_1-合并配置项" aria-label="Permalink to &quot;1. 合并配置项&quot;">​</a></h2><p>把配置文件读取到的参数和命令行传入的参数进行合并，得到最终的配置参数</p><h2 id="_2-初始化编译" tabindex="-1">2. 初始化编译 <a class="header-anchor" href="#_2-初始化编译" aria-label="Permalink to &quot;2. 初始化编译&quot;">​</a></h2><ol><li>初始化 complier 对象</li><li>注册编译过程中的钩子</li><li>注册 Plugin</li></ol><h2 id="_3-编译" tabindex="-1">3. 编译 <a class="header-anchor" href="#_3-编译" aria-label="Permalink to &quot;3. 编译&quot;">​</a></h2><h4 id="_1-调用-complier-run-创建-compilation-对象" tabindex="-1">1. 调用 <code>complier.run()</code>, 创建 compilation 对象 <a class="header-anchor" href="#_1-调用-complier-run-创建-compilation-对象" aria-label="Permalink to &quot;1. 调用 `complier.run()`, 创建 compilation 对象&quot;">​</a></h4><h4 id="_2-编译文件-build" tabindex="-1">2. 编译文件 - build <a class="header-anchor" href="#_2-编译文件-build" aria-label="Permalink to &quot;2. 编译文件 - build&quot;">​</a></h4><ol><li>读取配置里的入口文件</li><li>从入口文件开始，借助 loaders 递归的解析文件，并创建出 module 对象</li></ol><h4 id="_3-生成文件-seal" tabindex="-1">3. 生成文件 - seal <a class="header-anchor" href="#_3-生成文件-seal" aria-label="Permalink to &quot;3. 生成文件 - seal&quot;">​</a></h4><ol><li>根据入口文件和依赖模块组装 chunks</li><li>根据 chunks 生成 assets 文件</li></ol><h2 id="_4-将生成的-assets-文件写入到文件系统" tabindex="-1">4. 将生成的 assets 文件写入到文件系统 <a class="header-anchor" href="#_4-将生成的-assets-文件写入到文件系统" aria-label="Permalink to &quot;4. 将生成的 assets 文件写入到文件系统&quot;">​</a></h2><p><img src="https://limy-1309594960.cos.ap-beijing.myqcloud.com/202210032129721.png" alt="webpack 打包流程" data-__preview__="true"><a href="https://github.com/mingyuLi97/mini-webpack" target="_blank" rel="noreferrer">mini-webpack</a></p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/7031546400034947108" target="_blank" rel="noreferrer">掘金：Webpack5 核心打包原理全流程解析</a></li></ul>',15),t=[o];function n(s,c,h,d,_,u){return e(),l("div",null,t)}const m=a(r,[["render",n]]);export{b as __pageData,m as default};
