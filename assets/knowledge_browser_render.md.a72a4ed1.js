import{_ as s,o as l,c as a,Q as n}from"./chunks/framework.f14b72c3.js";const A=JSON.parse('{"title":"渲染流程","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/browser/render.md"}'),t={name:"knowledge/browser/render.md"},o=n(`<h1 id="渲染流程" tabindex="-1">渲染流程 <a class="header-anchor" href="#渲染流程" aria-label="Permalink to &quot;渲染流程&quot;">​</a></h1><h2 id="浏览器中输入-url-到页面返回的全过程" tabindex="-1">浏览器中输入 <code>URL</code> 到页面返回的全过程 <br> <a class="header-anchor" href="#浏览器中输入-url-到页面返回的全过程" aria-label="Permalink to &quot;浏览器中输入 \`URL\` 到页面返回的全过程 &lt;br/&gt;&quot;">​</a></h2><ol><li><a href="/blog/knowledge/network/dns.html#解析过程">DNS 域名解析</a></li><li>拿到解析的 IP 地址，建立 <a href="/blog/knowledge/network/tcp-udp.html#tcp">TCP</a> 连接</li><li>向 IP 地址发送 <a href="/blog/knowledge/network/http.html">HTTP</a> 请求</li><li>服务器处理请求</li><li><a href="./../network/http-code.html">返回响应结果</a></li><li>关闭 TCP 连接</li><li><a href="#浏览器解析-html">浏览器解析 HTML</a></li><li>浏览器布局渲染</li></ol><p><img src="https://limy-1309594960.cos.ap-beijing.myqcloud.com/202210121040167.png" alt="" data-__preview__="true"></p><h2 id="浏览器解析-html" tabindex="-1">浏览器解析 HTML <a class="header-anchor" href="#浏览器解析-html" aria-label="Permalink to &quot;浏览器解析 HTML&quot;">​</a></h2><ol><li>浏览器首先下载该地址所对应的 html 页面。</li><li>浏览器解析 html 页面的 DOM 结构。</li><li>开启下载线程对文档中的所有资源按优先级排序下载。</li><li>主线程继续解析文档，到达 head 节点 ，head 里的外部资源无非是外链样式表和外链 js。 <ul><li>js 外链，则停止解析后续内容，等待该资源下载，下载完后立刻执行。</li><li>css 外链，继续解析后续内容。</li></ul></li><li><a href="#dom-解析">DOM 解析</a></li><li>文档解析完毕，页面重新渲染。当页面引用的所有 js 同步代码执行完毕，触发 DOMContentLoaded 事件。</li><li>html 文档中的图片资源，js 代码中有异步加载的 css、js 、图片资源都加载完毕之后，load 事件触发。</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>DOMContentLoaded</code>：始的 HTML 文档被完全加载和解析完成之后，该事件被触发，而无需等待样式表、图像和子框架的完成加载。</p><p><code>load</code>：整个页面及所有依赖资源如样式表和图片都已完成加载时触发。</p></div><h4 id="dom-解析" tabindex="-1">DOM 解析 <a class="header-anchor" href="#dom-解析" aria-label="Permalink to &quot;DOM 解析&quot;">​</a></h4><ol><li>css 不会影响 DOM 解析，但会影响页面渲染。</li></ol><ul><li>外链 css 加载完之前，页面还是白屏。</li><li>js 之前的外链 css 未加载完之前，页面是不会被渲染的</li></ul><div class="tip custom-block"><p class="custom-block-title">why</p><p>如果不阻塞页面渲染，就会先出现一种样式，加载完又变为另一个样子，用户体验差，而且渲染成本是很高的。</p></div><ol start="2"><li><p>js 会阻塞 dom 解析和渲染</p></li><li><p>浏览器遇到 <code>&lt;script&gt;</code> 且没有 <code>defer</code> 或 <code>async</code> 属性的 标签时，会触发页面渲染，因而如果前面 CSS 资源尚未加载完毕时，浏览器会等待它加载完毕在执行脚本（css 会影响 js 执行）。</p></li></ol><div class="tip custom-block"><p class="custom-block-title">why</p><p>如果 js 里面有获取样式相关的方法，样式不提前加载完成，获取的将会有问题</p></div><details class="details custom-block"><summary>测试 DOM 解析代码</summary><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">&lt;!-- 白屏 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;div1&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">&lt;!-- 白屏 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">link</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">rel</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;stylesheet&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;./c1.css&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">&lt;!-- 白屏 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">link</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">rel</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;stylesheet&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;./c3.css&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">&lt;!-- 如果此时 j1.js 尚未下载到本地，则首次渲染，此时的 DOM 树 只有 div1 ，所以页面上只会显示 div1，样式是 c1.css 和 c3.css 的并集。--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">&lt;!-- 如果此时 j1.js 已经下载到本地，则先执行 j1.js，页面不会渲染，所以此时仍然是白屏。--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">&lt;!--下面的 js 阻塞了 DOM 树的构建，所以下面的 div2 没有在文档的 DOM 树中。 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://test.com:9000/mine/load/case2/j1.js</span></span>
<span class="line"><span style="color:#98C379;">  &quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">&lt;!-- j1.js 执行完毕，继续 DOM 解析，div2 被构建在文档 DOM 树中，此时页面上有了div2 元素，样式仍然是 c1.css 和 c3.css 的并集 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">link</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">rel</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;stylesheet&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;./c4.css&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">&lt;!-- c4.css 加载完毕，重新构建render树，样式变成了 c1.css、c3.css 和 c4.css 的并集 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;div2&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 利用 performance 统计 load 加载时间。</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onload</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">performance</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">timing</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">loadEventStart</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">performance</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">timing</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fetchStart</span></span>
<span class="line"><span style="color:#ABB2BF;">      );</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre></div></details><h4 id="defer-async" tabindex="-1">defer - async <a class="header-anchor" href="#defer-async" aria-label="Permalink to &quot;defer - async&quot;">​</a></h4><p><img src="https://limy-1309594960.cos.ap-beijing.myqcloud.com/202208271133182_defer_async.png" alt="" data-__preview__="true"></p><table><thead><tr><th style="text-align:left;"><code>&lt;script&gt;</code></th><th style="text-align:left;">在 HTML 中的顺序</th><th style="text-align:left;">阻塞</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&lt;script async&gt;</code></td><td style="text-align:left;">网络请求返回顺序</td><td style="text-align:left;">可能阻塞，也可能不阻塞</td></tr><tr><td style="text-align:left;"><code>&lt;script defer&gt;</code></td><td style="text-align:left;">在 HTML 中的顺序</td><td style="text-align:left;">不阻塞</td></tr></tbody></table><h2 id="渲染流程-1" tabindex="-1">渲染流程 <a class="header-anchor" href="#渲染流程-1" aria-label="Permalink to &quot;渲染流程&quot;">​</a></h2><p><img src="https://limy-1309594960.cos.ap-beijing.myqcloud.com/202208262219577_render.png" alt="" data-__preview__="true"></p><ol><li><a href="#dom-解析">解析 HTML</a> 生成 <code>DOM Tree</code> ,解析 CSS 生成 <code>Style Rules</code></li><li>将 <code>DOM Tree</code>和 <code>Style Rules</code> 树相结合生成 渲染树</li><li>回流(Layout)</li><li>重绘(Painting)</li><li>Display 将像素发送给 GPU，展示在界面上</li></ol><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/load_event" target="_blank" rel="noreferrer">MDN</a></li><li><a href="https://juejin.cn/post/6844903497599549453" target="_blank" rel="noreferrer">掘金：原来 CSS 与 JS 是这样阻塞 DOM 解析和渲染的</a></li><li><a href="https://juejin.cn/post/6844903623583891469" target="_blank" rel="noreferrer">掘金：再谈 load 与 DOMContentLoaded</a></li><li><a href="https://www.jianshu.com/p/c3384c315d40" target="_blank" rel="noreferrer">简书：DOMContentLoaded 与 load 的区别、触发时机</a></li></ul>`,22),e=[o];function p(c,r,i,B,y,d){return l(),a("div",null,e)}const F=s(t,[["render",p]]);export{A as __pageData,F as default};
