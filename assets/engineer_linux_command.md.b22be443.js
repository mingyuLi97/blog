import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.fa80b722.js";const F=JSON.parse('{"title":"基础命令","description":"","frontmatter":{},"headers":[],"relativePath":"engineer/linux/command.md","filePath":"engineer/linux/command.md"}'),o={name:"engineer/linux/command.md"},p=l(`<h1 id="基础命令" tabindex="-1">基础命令 <a class="header-anchor" href="#基础命令" aria-label="Permalink to &quot;基础命令&quot;">​</a></h1><h2 id="程序挂载到后台" tabindex="-1">程序挂载到后台 <a class="header-anchor" href="#程序挂载到后台" aria-label="Permalink to &quot;程序挂载到后台&quot;">​</a></h2><h4 id="方式一" tabindex="-1">方式一 <a class="header-anchor" href="#方式一" aria-label="Permalink to &quot;方式一&quot;">​</a></h4><p>使用 <code>&amp;</code> 符号：在命令行中输入命令，然后在命令的末尾添加<code>&amp;</code>符号即可将该进程挂在后台</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">command</span><span style="color:#ABB2BF;"> &amp;</span></span></code></pre></div><h4 id="方式二" tabindex="-1">方式二 <a class="header-anchor" href="#方式二" aria-label="Permalink to &quot;方式二&quot;">​</a></h4><p>使用 <code>Ctrl+z</code>和 <code>bg</code> 命令：在命令行中输入命令，然后按下<code>Ctrl+z</code>键将进程挂起。然后，输入<code>bg</code>命令即可将该进程挂在后台。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">command</span></span>
<span class="line"><span style="color:#61AFEF;">Ctrl+z</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">bg</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>你可以使用 jobs 命令查看后台运行的进程。如果你需要将一个后台进程带回到前台，可以使用 fg 命令。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">jobs</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">fg</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">%</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#98C379;">job</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">numbe</span><span style="color:#ABB2BF;">r&gt;</span></span></code></pre></div><p>如果在终端退出时不想停止该进程，你可以使用 <code>nohup</code> 命令。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">nohup</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">command</span><span style="color:#ABB2BF;"> &amp;</span></span></code></pre></div></div><h2 id="输出重定向" tabindex="-1">输出重定向 <a class="header-anchor" href="#输出重定向" aria-label="Permalink to &quot;输出重定向&quot;">​</a></h2><p>输出分为：</p><ul><li>标准输出（stdout），例如：python 中的 <code>print</code></li><li>标准错误流（stderr），例如：python 中的模块 <code>tqdm</code></li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 重定向标准输出流</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">python</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">script.py</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">output.txt</span><span style="color:#ABB2BF;"> &amp;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 重定向标准输出 + 标准错误流</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">python</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">script.py</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">output.txt</span><span style="color:#ABB2BF;"> 2&gt;</span><span style="color:#98C379;">error.txt</span><span style="color:#ABB2BF;"> &amp;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 输出到同一个文件</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">python</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">script.py</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">output.txt</span><span style="color:#ABB2BF;"> 2&gt;&amp;1 &amp;</span></span></code></pre></div>`,13),e=[p];function t(c,r,i,d,y,B){return a(),n("div",null,e)}const u=s(o,[["render",t]]);export{F as __pageData,u as default};
