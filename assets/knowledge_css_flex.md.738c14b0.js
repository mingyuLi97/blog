import{_ as e,o as s,c as a,Q as l}from"./chunks/framework.f14b72c3.js";const x=JSON.parse('{"title":"flex","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/css/flex.md"}'),o={name:"knowledge/css/flex.md"},n=l(`<h1 id="flex" tabindex="-1">flex <a class="header-anchor" href="#flex" aria-label="Permalink to &quot;flex&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">TODO</p><p>很老的总结，不是很好，暂时可以直接看 <a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noreferrer">阮一峰 Flex</a></p></div><h2 id="_1-原理" tabindex="-1">1.原理 <a class="header-anchor" href="#_1-原理" aria-label="Permalink to &quot;1.原理&quot;">​</a></h2><ul><li>给父盒子指定 <code>display:flex</code> 控制子盒子的位置和排列方式</li></ul><h2 id="_2-父项属性" tabindex="-1">2.父项属性 <a class="header-anchor" href="#_2-父项属性" aria-label="Permalink to &quot;2.父项属性&quot;">​</a></h2><ul><li><p><strong>flex-direction</strong>：设置主轴的方向</p><p><code>row</code> ：x 轴正方向（默认）</p><p><code>row-reverse</code>：x 轴负方向</p><p><code>column</code>：y 轴正方向</p><p><code>column-reverse</code>：y 轴负方向</p></li><li><p><strong>justify-content</strong>：设置主轴上的子元素的排列方式（使用时要确定主轴方向）</p><p><code>flex-start</code>：从头开始排列（默认）</p><p><code>flex-end</code>：从尾部开始排列</p><p><code>center</code>：在主轴中心对齐（如果主轴是 x 轴 水平居中）</p><p><code>space-around</code>：平均分配剩余空间（相当于给每个盒子加上一个相同的 margin）</p><p><code>space-between</code>：先两边贴边再分配剩余空间</p></li><li><p><strong>flex-wrap</strong>：设置子元素是否换行</p><p>默认情况下，项目都排在一条线上，如果排不开将缩小每一个的宽度</p><p><code>nowrap</code>：不换行（默认）</p><p><code>wrap</code>：换行</p></li><li><p><strong>align-items</strong>：设置侧轴上的子元素排列方式（单行）</p><p><code>flex-start</code>：从头开始排列（默认）</p><p><code>flex-end</code>：从尾部开始排列</p><p><code>center</code>：居中对齐（如果主轴是 x 轴 垂直居中）</p><p><code>stretch</code>：拉伸（子盒子不要给高度，将子盒子拉伸充满父盒子）</p><p><code>baseline</code>： 项目的第一行文字的基线对齐。</p></li><li><p><strong>align-content</strong>：设置侧轴上的子元素排列方式（多行 - 必须存在换行）</p><p><code>flex-start</code>：从头开始排列</p><p><code>flex-end</code>：从尾部开始排列</p><p><code>center</code>：居中对齐</p><p><code>space-around</code>：平均分配剩余空间</p><p><code>space-between</code>：先两边贴边再分配剩余空间</p><p><code>stretch</code>：拉伸</p></li><li><p><strong>flex-flow</strong>：flex-direction 和 flex-wrap 的复合写方法</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E06C75;">flex-direction</span><span style="color:#C678DD;">: row;</span></span>
<span class="line"><span style="color:#E06C75;">flex-wrap</span><span style="color:#C678DD;">: wrap;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* 等价 */</span></span>
<span class="line"><span style="color:#E06C75;">flex-flow</span><span style="color:#C678DD;">: row wrap;</span></span></code></pre></div></li></ul><h2 id="_3-子项属性" tabindex="-1">3.子项属性 <a class="header-anchor" href="#_3-子项属性" aria-label="Permalink to &quot;3.子项属性&quot;">​</a></h2><ul><li><p><code>flex</code>：属性定义子项目分配<strong>剩余空间</strong>，用 <code>flex</code> 来表示所占的<strong>份数</strong></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#D19A66;">.item</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  flex: &lt;number&gt;; </span><span style="color:#7F848E;font-style:italic;">/* default 0*/</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div></li><li><p><code>align-self</code> 控制自己在侧轴的排列方式</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E06C75;">span</span><span style="color:#56B6C2;">:nth-child</span><span style="color:#C678DD;">(</span><span style="color:#D19A66;">2</span><span style="color:#C678DD;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">/*只让第2个盒子下降到底部*/</span></span>
<span class="line"><span style="color:#ABB2BF;">  align-self: </span><span style="color:#D19A66;">flex-end</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div></li><li><p><code>order</code> 定义盒子的排列顺序（默认为 0）</p></li><li><p><code>flex-grow</code> 属性定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。</p></li><li><p><code>flex-shrink</code> 属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。</p></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间（如果有的话）。如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</p></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://space.bilibili.com/415434293?from=search&amp;seid=7794536082102280588" target="_blank" rel="noreferrer">pink 老师视频教程</a></li><li><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noreferrer">阮一峰：Flex 布局教程：语法篇</a></li></ul>`,11),p=[n];function c(t,r,i,d,f,g){return s(),a("div",null,p)}const u=e(o,[["render",c]]);export{x as __pageData,u as default};
