import{_ as s,o as a,c as n,R as l}from"./chunks/framework.d45ee533.js";const m=JSON.parse('{"title":"移动端布局","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge/css/px.md"}'),o={name:"knowledge/css/px.md"},p=l(`<h1 id="移动端布局" tabindex="-1">移动端布局 <a class="header-anchor" href="#移动端布局" aria-label="Permalink to &quot;移动端布局&quot;">​</a></h1><h2 id="meta-设置" tabindex="-1">meta 设置 <a class="header-anchor" href="#meta-设置" aria-label="Permalink to &quot;meta 设置&quot;">​</a></h2><p>首先移动端要设置好视口 <code>viewport</code>，标识该网页是移动端网页，从而避免点击 <a href="https://juejin.cn/post/6844904031026937864" target="_blank" rel="noreferrer">300ms 延迟</a> 的问题</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">meta</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;">content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0, user-scalable=no, maximum-scale=1.0, minimum-scale=1.0&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">/&gt;</span></span></code></pre></div><h2 id="em" tabindex="-1">em <a class="header-anchor" href="#em" aria-label="Permalink to &quot;em&quot;">​</a></h2><p>em 是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。</p><p>em 特点：em 的值并不是固定的；em 会继承父级元素的字体大小。</p><h2 id="rem" tabindex="-1">rem <a class="header-anchor" href="#rem" aria-label="Permalink to &quot;rem&quot;">​</a></h2><p>rem 是 CSS3 新增的一个相对单位（root em，根 em）。这个单位与 em 的区别在于 rem <strong>相对的是 HTML 根元素</strong>。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。</p><h4 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h4><p>rem 是相对长度单位，相对 html 元素（文档根元素 <code>document.documentElement</code>）计算值的倍数。根据屏幕的宽度设置 html 标签的 font-size，在布局时使用 rem 单位，达到自适应的目的，是弹性布局的一种实现方式。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 为了方便计算，我们一般设置 1rem == 100px</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">rem</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">params</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">width</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientWidth</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerWidth</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 设计稿为 750</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">width</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">750</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">width</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">750</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 将页面分成 7.5 份，每一份就是 fontSize</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">h</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">width</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">7.5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;html&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fontSize</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">h</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;px&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><h4 id="rem-to-px" tabindex="-1">rem to px <a class="header-anchor" href="#rem-to-px" aria-label="Permalink to &quot;rem to px&quot;">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">remToPx</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">rem</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">fontSize</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">parseInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;html&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fontSize</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">rem</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">fontSize</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><h4 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ol><li>自适应效果好。</li><li>兼容性好，除了 IE8 及更早版本外，所有浏览器均已支持 rem。</li></ol><h4 id="缺点" tabindex="-1">缺点： <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点：&quot;">​</a></h4><ol><li>不是纯 css 移动适配方案，需要引入 js 脚本，监听浏览器窗口缩放行为动态改变根元素的字体大小。css 样式和 js 代码有一定耦合性，并且必须将改变 font-size 的代码放在 css 样式之前。</li><li>小数像素问题，浏览器渲染最小的单位是像素，元素根据屏幕宽度自适应，通过 rem 计算后可能会出现小数像素，浏览器会对这部分小数四舍五入，按照整数渲染。浏览器在渲染时所做的摄入处理只是应用在元素的尺寸渲染上，其真实占据的空间依旧是原始大小。也就是说如果一个元素尺寸是 0.625px，那么其渲染尺寸应该是 1px，空出的 0.375px 空间由其临近的元素填充；同样道理，如果一个元素尺寸是 0.375px，其渲染尺寸就应该是 0，但是其会占据临近元素 0.375px 的空间。会导致：缩放到低于 1px 的元素时隐时现（解决办法：指定最小转换像素，对于比较小的像素，不转换为 rem 或 vw）；两个同样宽度的元素因为各自周围的元素宽度不同，导致两元素相差 1px；宽高相同的正方形，长宽不等了；border-radius: 50% 画的圆不圆。</li></ol><h2 id="vw-vh-方案" tabindex="-1">vw/vh 方案 <a class="header-anchor" href="#vw-vh-方案" aria-label="Permalink to &quot;vw/vh 方案&quot;">​</a></h2><p>视口是浏览器中用于呈现网页的区域，也就是用户所能看到的页面区域。</p><ul><li>1vw，等于视口宽度的 1%；</li><li>1vh，等于视口高度的 1%；</li><li>vmin，选取 vw 和 vh 中最小的那个值；</li><li>vmax，选取 vw 和 vh 中最大的那个值；</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>可以通过 <a href="https://www.npmjs.com/package/postcss-px-to-viewport" target="_blank" rel="noreferrer">插件：postcss-px-to-viewport</a> 自动将 px 转换成 vw/vh</p></div><h4 id="优点-1" tabindex="-1">优点： <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点：&quot;">​</a></h4><ol><li>纯 css 移动端适配方案，不存在脚本依赖的问题；</li><li>根据视口宽度的百分比来定义元素宽度，计算方便；</li></ol><h4 id="缺点-1" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点：&quot;">​</a></h4><p>存在兼容问题，只在移动端 iOS 8 以上以及 Android 4.4 以上获得支持；</p>`,26),e=[p];function t(r,c,B,i,y,d){return a(),n("div",null,e)}const A=s(o,[["render",t]]);export{m as __pageData,A as default};
