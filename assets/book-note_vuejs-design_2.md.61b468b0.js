import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.fa80b722.js";const A=JSON.parse('{"title":"第二章：框架设计的核心要素","description":"","frontmatter":{},"headers":[],"relativePath":"book-note/vuejs-design/2.md","filePath":"book-note/vuejs-design/2.md"}'),o={name:"book-note/vuejs-design/2.md"},e=l(`<h1 id="第二章-框架设计的核心要素" tabindex="-1">第二章：框架设计的核心要素 <a class="header-anchor" href="#第二章-框架设计的核心要素" aria-label="Permalink to &quot;第二章：框架设计的核心要素&quot;">​</a></h1><h2 id="提升开发体验" tabindex="-1">提升开发体验 <a class="header-anchor" href="#提升开发体验" aria-label="Permalink to &quot;提升开发体验&quot;">​</a></h2><blockquote><p>一个优秀的框架衡量指标之一就是看他的开发体验</p></blockquote><ol><li>Vue 通过 warn 函数提供了友好的警告信息，帮助用户定位问题。</li><li>在打印数据时，尤其是响应式数据，非常的不直观，Vue 通过 initCustomFormatter 函数自定义了控制台输出。</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Chrome 下勾选 Console 里的 <code>Enable custom formatters</code> 选项，就可以看到更直观的打印。</p></div><h2 id="控制框架代码体积" tabindex="-1">控制框架代码体积 <a class="header-anchor" href="#控制框架代码体积" aria-label="Permalink to &quot;控制框架代码体积&quot;">​</a></h2><p>通过 <code>__DEV__</code> 常量，将开发环境和生产环境区分。做到了在开发环境为用户提供友好的开发体验的同时，不增加生产环境代码。</p><h2 id="良好的-tree-shaking" tabindex="-1">良好的 Tree-Shaking <a class="header-anchor" href="#良好的-tree-shaking" aria-label="Permalink to &quot;良好的 Tree-Shaking&quot;">​</a></h2><ol><li>要想实现 Tree-Shaking，代码必须使 ESM 模块。</li><li>当函数调用时会对外部产生影响（例如修改了全局变量）这种情况无法实现 Tree-Shaking，我们成为有副作用。可以通过注释 <code>/*#__PURE__*/</code> 来告诉打包工具，代码不会产生副作用。</li></ol><h2 id="输出的构建产物" tabindex="-1">输出的构建产物 <a class="header-anchor" href="#输出的构建产物" aria-label="Permalink to &quot;输出的构建产物&quot;">​</a></h2><ol><li>在浏览器中使用 iife 模式</li><li>支持 ESM 的浏览器可以使用 vue.esm-browser.js</li><li>项目中使用 vue.esm-bundler.js</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>同样都是 esm -browser 和 -bundler 的区别？</p><ul><li>browser 会将 <code>__DEV___</code> 设置为 <code>false</code></li><li>bundler 会将<code>__DEV___</code> 设置为 <code>p<wbr>rocess.env.NODE_ENV !== &#39;production&#39;</code>，使其交给项目中的打包工具决定如何打包。</li></ul></div><ol start="4"><li>服务端渲染使用 CommonJS 规范，cjs</li></ol><h2 id="特性开关" tabindex="-1">特性开关 <a class="header-anchor" href="#特性开关" aria-label="Permalink to &quot;特性开关&quot;">​</a></h2><p>Vue 提供了诸多特性并提供了对应的特性开关，开发者可以有选择的去取舍这些特性。</p><p>Vue 为了兼容 Vue2 的 options-api，提供了相关的代码支持，如果开发者明确知到代码不会使用选项式 API，那么可以将其 Tree-Shaking，从而减少资源体积。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 借助 webpack.DefinePlugin 配置</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">webpack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">DefinePlugin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">_<wbr>_VUE_OPTIONS_API__</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 开启或者关闭特性</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre></div><h2 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h2><p>为了提高用户代码的健壮性和简洁性，Vue 提供了统一的错误处理函数。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">handlerError</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">callWithErrorHandling</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 用户调用该方法注册错误回调</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">registerErrorHandling</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">handlerError</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 源码里也是用的该函数名</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">callWithErrorHandling</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 将捕获到的错误传递给用户，用户可以选择忽略 或者将其上报给错误监控系统</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">handlerError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><h2 id="良好的-ts-支持" tabindex="-1">良好的 TS 支持 <a class="header-anchor" href="#良好的-ts-支持" aria-label="Permalink to &quot;良好的 TS 支持&quot;">​</a></h2>`,21),p=[e];function t(r,c,i,B,y,d){return a(),n("div",null,p)}const h=s(o,[["render",t]]);export{A as __pageData,h as default};
